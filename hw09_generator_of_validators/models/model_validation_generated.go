// Code generated by go-validate. DO NOT EDIT.
package models

import (
	"fmt"
	"regexp"
)

type ValidationError struct {
	Field string
	Err   error
}

func (t User) Validate() ([]ValidationError, error) {
	var validErrs []ValidationError

	if len(t.ID) != 36 {
		validErrs = append(validErrs, ValidationError{
			Field: "ID",
			Err:   fmt.Errorf("wrong length: expected %d, got %d", 36, len(t.ID)),
		})
	}

	if t.Age < 18 {
		validErrs = append(validErrs, ValidationError{
			Field: "Age",
			Err:   fmt.Errorf("%d should be more than %d", t.Age, 18),
		})
	}

	if t.Age > 50 {
		validErrs = append(validErrs, ValidationError{
			Field: "Age",
			Err:   fmt.Errorf("%d should be less than %d", t.Age, 50),
		})
	}

	matched, err := regexp.MatchString("^\\w+@\\w+\\.\\w+$", t.Email)
	if err != nil {
		return validErrs, fmt.Errorf("wrong regexp")
	}
	if !matched {
		validErrs = append(validErrs, ValidationError{
			Field: "Email",
			Err:   fmt.Errorf("%s does not match regexp", t.Email),
		})
	}

	strVariants := []string{"admin", "stuff"}
	isStrVariant := false
	for _, i := range strVariants {
		if string(t.Role) == i {
			isStrVariant = true
			break
		}
	}
	if !isStrVariant {
		validErrs = append(validErrs, ValidationError{
			Field: "Role",
			Err:   fmt.Errorf("not allowed value %s", t.Role),
		})
	}

	for i, _ := range t.Phones {

		if len(t.Phones[i]) != 11 {
			validErrs = append(validErrs, ValidationError{
				Field: "Phones[i]",
				Err:   fmt.Errorf("wrong length: expected %d, got %d", 11, len(t.Phones[i])),
			})
		}

	}

	return validErrs, nil
}
func (t App) Validate() ([]ValidationError, error) {
	var validErrs []ValidationError

	if len(t.Version) != 5 {
		validErrs = append(validErrs, ValidationError{
			Field: "Version",
			Err:   fmt.Errorf("wrong length: expected %d, got %d", 5, len(t.Version)),
		})
	}

	return validErrs, nil
}
func (t Response) Validate() ([]ValidationError, error) {
	var validErrs []ValidationError

	intVariants := []int{200, 404, 500}
	isVariant := false
	for _, i := range intVariants {
		if t.Code == i {
			isVariant = true
			break
		}
	}
	if !isVariant {
		validErrs = append(validErrs, ValidationError{
			Field: "Code",
			Err:   fmt.Errorf("not allowed value %d", t.Code),
		})
	}

	return validErrs, nil
}
