// Code generated by go-validate. DO NOT EDIT.
package models

import (
  "fmt"
  "regexp"
)

type ValidationError struct{
  Field string
  Err   error
}

func (t App) Validate() ([]ValidationError, error) {
  validErrs := []ValidationError{}
  
  

if len(t.Version) != 5 {
  validErrs = append(validErrs, ValidationError{
    Field: "Version",
    Err: fmt.Errorf("wrong length"),
  })
}


  
  return validErrs, nil
}
func (t Response) Validate() ([]ValidationError, error) {
  validErrs := []ValidationError{}
  
  

intVariants := []int{ 200,404,500 }
isVariant := false
for _, i := range intVariants {
  if t.Code == i {
    isVariant = true
    break
  }
}
if !isVariant {
  validErrs = append(validErrs, ValidationError{
    Field: "Code",
    Err: fmt.Errorf("not allowed value"),
  })
}


  
  


  
  return validErrs, nil
}
func (t User) Validate() ([]ValidationError, error) {
  validErrs := []ValidationError{}
  
  

if len(t.ID) != 32 {
  validErrs = append(validErrs, ValidationError{
    Field: "ID",
    Err: fmt.Errorf("wrong length"),
  })
}


  
  


  
  

if t.Age < 18 {
  validErrs = append(validErrs, ValidationError{
    Field: "Age",
    Err: fmt.Errorf("less than min"),
  })
}

if t.Age > 50 {
  validErrs = append(validErrs, ValidationError{
    Field: "Age",
    Err: fmt.Errorf("more than max"),
  })
}


  
  

matched, err := regexp.MatchString("^\\w+@\\w+\\.\\w+$", t.Email)
if err != nil {
  return validErrs, fmt.Errorf("wrong regexp")
}
if !matched {
  validErrs = append(validErrs, ValidationError{
    Field: "Email",
    Err: fmt.Errorf("does not match regexp"),
  })
}


  
  

strVariants := []string{ "admin","stuff" }
isStrVariant := false
for _, i := range strVariants {
  if string(t.Role) == i {
    isStrVariant = true
    break
  }
}
if !isStrVariant {
  validErrs = append(validErrs, ValidationError{
    Field: "Role",
    Err: fmt.Errorf("not allowed value"),
  })
}


  
  for i, _ := range t.Addresses {
    
    

if len(t.Addresses[i]) != 250 {
  validErrs = append(validErrs, ValidationError{
    Field: "Addresses[i]",
    Err: fmt.Errorf("wrong length"),
  })
}

  }

  
  return validErrs, nil
}
